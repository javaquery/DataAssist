package com.hibernateassist.database;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import org.hibernate.Hibernate;
import org.hibernate.SQLQuery;
import org.json.JSONArray;
import org.json.JSONObject;

import com.hibernateassist.common.CommonUtil;
import com.hibernateassist.common.CommonUtil.jsPlumbArrowPosition;

public class PostgreSQLAnalyser extends AbstractDAO implements Analyser{
	private static final Logger logger = Logger.getLogger(PostgreSQLAnalyser.class.getName());
	private static Map<String, String> mapOperationAndImagePosition = new HashMap<String, String>();
	
	static{
		mapOperationAndImagePosition.put("Hash Join", "-56px -185px");
		mapOperationAndImagePosition.put("Seq Scan", "-680px -185px");
		mapOperationAndImagePosition.put("Hash", "-536px -137px");
		mapOperationAndImagePosition.put("Nested Loop", "-440px -185px");
		mapOperationAndImagePosition.put("Index Scan", "-968px -137px");
		mapOperationAndImagePosition.put("Limit", "-104px -185px");
		mapOperationAndImagePosition.put("Aggregate", "-8px -137px");
		mapOperationAndImagePosition.put("Sort", "-824px -185px	");
		mapOperationAndImagePosition.put("Result", "-632px -185px");
	}
	
	/**
	 * Generate Query report from Hibernate Criteria.
	 * @author 0Signals
	 * @date 21st June, 2015
	 * @since 1.3
	 * @param hibernateQuery
	 * @param actualQuery
	 * @param reportFolderPath
	 */
	@Override
	public void generateQueryReport(String hibernateQuery, String actualQuery, String reportFolderPath, String strFilenamePrefix){
		String strExecutionPlan = getExecutionPlan(actualQuery);
		if(strExecutionPlan != null && !strExecutionPlan.isEmpty()){
			try {
				JSONArray QueryPlan = new JSONArray(strExecutionPlan);
				StringBuilder stringBuilderHTMLReport = new StringBuilder("");
				stringBuilderHTMLReport.append(CommonUtil.getHTMLReportHeader());
				stringBuilderHTMLReport.append("<div class=\"graphical_data\">");
        	 	stringBuilderHTMLReport.append("<div class=\"operation_header\">");
                stringBuilderHTMLReport.append("<h3>Execution Plan - PostgreSQL</h3>");
                stringBuilderHTMLReport.append("It is the graphical representation of query executed on database. Each node in it plays significant role in query. Click on node for more information.");
                stringBuilderHTMLReport.append("</div>");
                stringBuilderHTMLReport.append("<div style=\"position:relative\">");
                stringBuilderHTMLReport.append("<div id=\"nodeDetails\"></div>");
				stringBuilderHTMLReport.append("<div id=\"parent0\" style=\"height:500px;max-height:500px;overflow:scroll;white-space: nowrap;position:relative\" class=\"whiteFadedbox\">");
				stringBuilderHTMLReport.append("</div>");
				stringBuilderHTMLReport.append("<script>");
				if(QueryPlan != null && QueryPlan.length() > 0){
					parseJSON(QueryPlan.getJSONObject(0), 0, 1, stringBuilderHTMLReport);
				}
				stringBuilderHTMLReport.append("</script>");
				stringBuilderHTMLReport.append("</div>");
                stringBuilderHTMLReport.append("</div>");
                stringBuilderHTMLReport.append("<div class=\"statistics_data\">");
                stringBuilderHTMLReport.append("<div class=\"operation_header\"><h3>Query Statistics</h3>");
                stringBuilderHTMLReport.append("Data shows actual query generated by Hibernate.");
                stringBuilderHTMLReport.append("</div>");
                stringBuilderHTMLReport.append("<div class=\"whiteFadedbox\" style=\"overflow:scroll;height:100px;font-size:15px\">");
                stringBuilderHTMLReport.append(hibernateQuery);
                stringBuilderHTMLReport.append("</div>");
                stringBuilderHTMLReport.append("</div>");
				stringBuilderHTMLReport.append(CommonUtil.getHTMLReportFooter());
				new CommonUtil().createHTMLReportFile(stringBuilderHTMLReport.toString(), strFilenamePrefix, reportFolderPath);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Get Execution Plan JSON from PostgreSQL.
	 * @author vicky.thakor
	 * @date 25th May, 2015 
	 * @since 1.3
	 * @param query
	 * @return
	 */
	private String getExecutionPlan(String query){
		String strExecutionPlan =  null;
		if(query == null || query.isEmpty()){
			logger.info("Please provide valid query");
		}else if(getHibernateSession() != null){
			SQLQuery objSQLQuery = getHibernateSession().createSQLQuery("EXPLAIN (format json) "+query);
			/**
			 * To resolve following error we used SQLQuery.addScalar("Query Plan", Hibernate.STRING);
			 * 
			 * <code>org.hibernate.MappingException: No Dialect mapping for JDBC type: 1111</code>
			 */
			objSQLQuery.addScalar("Query Plan", Hibernate.STRING);
    		List<String> executionPlanDetails = objSQLQuery.list();
    		strExecutionPlan = executionPlanDetails.get(0);
		}
		return strExecutionPlan;
	}
	
	/**
	 * Recursive method call to parse all MySQL operation.<br/><br/>
	 * @author vicky.thakor
	 * @date 25th May, 2015
	 * @since 1.3
	 * @param obj
	 * @param childOf
	 * @param parentOf
	 * @param stringBuilderHTMLReport
	 */
	private void parseJSON(JSONObject obj, int childOf, int parentOf, StringBuilder stringBuilderHTMLReport){
		if(obj != null && obj.length() > 0){
			if(obj.has("Plan")){
				/* Root node */
				JSONObject rootNode = obj.getJSONObject("Plan");
				generateChildDetails(childOf, parentOf, rootNode, stringBuilderHTMLReport);
				childOf = parentOf;
				/* Child of root node */
				if(rootNode.has("Plans")){
					JSONArray childNodes = rootNode.getJSONArray("Plans");
					for(int i = 0; i < childNodes.length(); i++){
						String dummyParent = parentOf + "" + i;
						parentOf = Integer.parseInt(dummyParent);
						parseJSON(childNodes.getJSONObject(i), childOf, parentOf, stringBuilderHTMLReport);
					}
				}
			}else if(obj.has("Plans")){
				generateChildDetails(childOf, parentOf, obj, stringBuilderHTMLReport);
				JSONArray childNodes = obj.getJSONArray("Plans");
				childOf = parentOf;
				/* Child of any node */
				for(int i = 0; i < childNodes.length(); i++){
					String dummyParent = parentOf +"" + i;
					parentOf = Integer.parseInt(dummyParent);
					parseJSON(childNodes.getJSONObject(i), childOf, parentOf, stringBuilderHTMLReport);
				}
			}else{
				generateChildDetails(childOf, parentOf, obj, stringBuilderHTMLReport);
			}
		}
	}
	
	/**
	 * Get child node(HTML content).
	 * @author vicky.thakor
	 * @date 25th May, 2015
	 * @since 1.3
	 * @param childOf
	 * @param parentOf
	 * @param nodeDetails
	 * @param stringBuilderHTMLReport
	 */
	private void generateChildDetails(int childOf, int parentOf, JSONObject nodeDetails, StringBuilder stringBuilderHTMLReport) {
		String htmlStyle = "padding-bottom:20px;display: inline-block;";
		if(childOf != 0)
			htmlStyle += "padding-left:95px;";
		
		stringBuilderHTMLReport.append("$(\"#parent").append(childOf).append("\")");
        stringBuilderHTMLReport.append(".append(\"<div id=\\\"parent").append(parentOf).append("\\\"");
        stringBuilderHTMLReport.append(" style=\\\"").append(htmlStyle).append("\\\">");
        stringBuilderHTMLReport.append(generateHTMLNode(parentOf, nodeDetails));
        stringBuilderHTMLReport.append("</div><br/>\");\n");
        
        if(childOf != 0){
        	/* Set Source and Target node for jsPlumb */
        	String sourceNode = "parentTable"+parentOf;
        	String targetNode =  "parentTable"+childOf; 
        	stringBuilderHTMLReport.append(CommonUtil.getjsPlumbScript(sourceNode, targetNode, jsPlumbArrowPosition.LeftMiddle, jsPlumbArrowPosition.RightMiddle));
        }
	}
	
	/**
	 * Generate Node in form of HTML.
	 * @author vicky.thakor
	 * @date 26th May, 2015
	 * @since 1.3
	 * @param parentID
	 * @param nodeDetails
	 * @return
	 */
	private String generateHTMLNode(int parentID, JSONObject nodeDetails){
		String strNodeType = "";
		String strNodeName = "";
		StringBuilder sbNodeAttribute = new StringBuilder();
		
		if(nodeDetails.has("Relation Name")){
			strNodeType = nodeDetails.getString("Node Type");
			strNodeName = nodeDetails.getString("Relation Name");
			if(nodeDetails.has("Index Name"))
				strNodeName = nodeDetails.getString("Index Name").replace("\"", "");
			
			if(nodeDetails.has("Strategy"))
				strNodeName = nodeDetails.getString("Strategy") + strNodeName;
		}else{
			strNodeType = nodeDetails.getString("Node Type");
			strNodeName = strNodeType;
			
			if(nodeDetails.has("Strategy"))
				strNodeName = nodeDetails.getString("Strategy") + " " + strNodeName;
		}

		Iterator iteratorNodeProperties = nodeDetails.keys();
		while(iteratorNodeProperties.hasNext()){
			String strKey = (String) iteratorNodeProperties.next();
			/* replace `Node Type` to `Node_Type` space is not supported in html tag attributes*/
			String strKeyAttribute = strKey.replace(" ", "_").replace("\"", "");
			
			
			if(!"Plans".equalsIgnoreCase(strKey)){
				String strValue = nodeDetails.getString(strKey);
				
				/* There are few values which contains `"` in JSON so replace it with blank */
				strValue = strValue.replace("\"", "");
				sbNodeAttribute.append(strKeyAttribute).append(" = ").append("\\\"<b>").append(strKey).append("</b>: ").append(strValue).append("\\\" ");
			}
		}
		String nodePosition = mapOperationAndImagePosition.get(strNodeType);
		/*if(nodePosition == null)
			System.out.println(strNodeType + " Position not found");*/
		
		nodePosition = nodePosition == null || nodePosition.isEmpty() ? "-296px -56px" : nodePosition;
		return getHTMLNodeImage(nodePosition, strNodeName, sbNodeAttribute.toString(), strNodeName, parentID);
	}
	
	/**
	 * Get HTML table that holds node image.
	 * @author vicky.thakor
	 * @date 26th May, 2015
	 * @since 1.3
	 * @param imageSrc
	 * @param imageTitle
	 * @param imageAttribute
	 * @param nodeName
	 * @param parentID
	 * @return
	 */
	private String getHTMLNodeImage(String imageSrc, String imageTitle, String imageAttribute, String nodeName, int parentID) {
		String nodeID = parentID == 0 ? "rootnode" : "parentTable"+parentID;
		return "<table class=\\\"nodeTable\\\" id=\\\""+nodeID+"\\\">"
                + "<tr>"
                + "<td style=\\\"width:95px\\\">"
                + "<div class=\\\"nodeImage\\\" style=\\\"position:relative;margin:0px auto;width:32px;height:32px;background: url('combine_icon_hibernate_assist.png') no-repeat "+imageSrc+"\\\" title=\\\"" + imageTitle + "\\\" " + imageAttribute + ">"
                + "</div>"
                + "</td>"
                + "</tr>"
                + "<tr>"
                + "<td style=\\\"width:95px;white-space: pre-wrap;\\\">" + nodeName + "<br/>"
                + "</td>"
                + "</tr>"
                + "</table>";
	}
}
