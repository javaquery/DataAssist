package com.hibernateassist.database;

import java.util.List;
import java.util.logging.Logger;

import org.hibernate.SQLQuery;
import org.hibernate.transform.Transformers;

import com.hibernateassist.common.CommonUtil;
import com.hibernateassist.pojo.OraclePlanTable;

public class OracleAnalyser extends AbstractDAO implements Analyser{
	private static final Logger logger = Logger.getLogger(OracleAnalyser.class.getName());
	
	/**
	 * @author vicky.thakor
	 * @date 23rd June, 2015
	 * @since 1.3
	 * @param hibernateQuery
	 * @param actualQuery
	 * @param reportFolderPath
	 */
	@Override
	public void generateQueryReport(String hibernateQuery, String actualQuery, String reportFolderPath, String strFilenamePrefix){
		List<OraclePlanTable> listOraclePlanTables = getExecutionPlan(actualQuery);
		if(listOraclePlanTables != null && !listOraclePlanTables.isEmpty()){
			StringBuilder stringBuilderHTMLReport = new StringBuilder("");
			stringBuilderHTMLReport.append(CommonUtil.getHTMLReportHeader());
			stringBuilderHTMLReport.append("<div class=\"graphical_data\">");
    	 	stringBuilderHTMLReport.append("<div class=\"operation_header\">");
            stringBuilderHTMLReport.append("<h3>Execution Plan - Oracle</h3>");
            stringBuilderHTMLReport.append("Table represent the execution plan of query in Oracle.");
            stringBuilderHTMLReport.append("</div>");
            stringBuilderHTMLReport.append("<div style=\"position:relative\">");
            stringBuilderHTMLReport.append("<div id=\"nodeDetails\"></div>");
			stringBuilderHTMLReport.append("<div id=\"parent0\" style=\"height:500px;max-height:500px;overflow:scroll;white-space: nowrap;position:relative\" class=\"whiteFadedbox\">");

			/* Print the Oracle Plan Table data in HTML table. */
			stringBuilderHTMLReport.append("<table class=\"stylistTable\" style=\"width:100%\">");
			stringBuilderHTMLReport.append("<thead>");
			stringBuilderHTMLReport.append(CommonUtil.prepareTableRow("Operation", "Options", "Object Name", "Object Type", "CPU Cost", "IO Cost", "Access Predicates", "Filter Predicates"));
			stringBuilderHTMLReport.append("</thead>");
			stringBuilderHTMLReport.append("<tbody>");
			
			for(OraclePlanTable oraclePlanTable : listOraclePlanTables){
				stringBuilderHTMLReport.append(CommonUtil.prepareTableRow(oraclePlanTable.getOPERATION(), oraclePlanTable.getOPTIONS(), oraclePlanTable.getOBJECT_NAME(),
																															 oraclePlanTable.getOBJECT_TYPE(), String.valueOf(oraclePlanTable.getCPU_COST()), String.valueOf(oraclePlanTable.getIO_COST()),
																															 oraclePlanTable.getACCESS_PREDICATES(), oraclePlanTable.getFILTER_PREDICATES()));
			}
			stringBuilderHTMLReport.append("</tbody></table>");
			stringBuilderHTMLReport.append("</div>");
			stringBuilderHTMLReport.append("</div>");
            stringBuilderHTMLReport.append("</div>");
            stringBuilderHTMLReport.append("<div class=\"statistics_data\">");
            stringBuilderHTMLReport.append("<div class=\"operation_header\"><h3>Query Statistics</h3>");
            stringBuilderHTMLReport.append("Data shows actual query generated by Hibernate.");
            stringBuilderHTMLReport.append("</div>");
            stringBuilderHTMLReport.append("<div class=\"whiteFadedbox\" style=\"overflow:scroll;height:100px;font-size:15px\">");
            stringBuilderHTMLReport.append(hibernateQuery);
            stringBuilderHTMLReport.append("</div>");
            stringBuilderHTMLReport.append("</div>");
			stringBuilderHTMLReport.append(CommonUtil.getHTMLReportFooter());
			new CommonUtil().createHTMLReportFile(stringBuilderHTMLReport.toString(), strFilenamePrefix, reportFolderPath);
		}
	}
	
	/**
	 * Get Execution Plan JSON from PostgreSQL.
	 * @author vicky.thakor
	 * @date 25th May, 2015 
	 * @since 1.3
	 * @param query
	 * @return
	 */
	@SuppressWarnings("unchecked")
	private List<OraclePlanTable> getExecutionPlan(String query){
		List<OraclePlanTable> listOraclePlanTables = null;
		if(query == null || query.isEmpty()){
			logger.info("Please provide valid query");
		}else if(getHibernateSession() != null){
			String strStatementID = CommonUtil.getRandomString(10);
			SQLQuery objSQLQuery = getHibernateSession().createSQLQuery("EXPLAIN PLAN SET STATEMENT_ID = '" + strStatementID + "' FOR "  + query);
			objSQLQuery.executeUpdate();
			
			objSQLQuery = getHibernateSession().createSQLQuery("SELECT statement_id, plan_id, timestamp, remarks, operation,"
																										+ "options, object_node, object_owner, object_name, object_alias," 
																										+ "object_instance, object_type, optimizer, search_columns, id," 
																										+ "parent_id, depth, position, cost, cardinality," 
																										+ "bytes, other_tag, partition_start, partition_stop, partition_id," 
																										+ "other, distribution, cpu_cost, io_cost," 
																										+ "temp_space, access_predicates, filter_predicates, projection, time," 
																										+ "qblock_name "
																										+ "FROM plan_table START WITH parent_id IS NULL AND statement_id = :strStatementID "
																										+ "CONNECT BY prior id = parent_id");
			objSQLQuery.setParameter("strStatementID", strStatementID);
			/* Convert Object to Bean */
			objSQLQuery.setResultTransformer(Transformers.aliasToBean(OraclePlanTable.class));
    		listOraclePlanTables = objSQLQuery.list();
    		
    		/* Delete prepared plan from oracle */
    		objSQLQuery = getHibernateSession().createSQLQuery("DELETE FROM plan_table WHERE statement_id = :strStatementID");
    		objSQLQuery.setParameter("strStatementID", strStatementID);
    		objSQLQuery.executeUpdate();
		}
		return listOraclePlanTables;
	}
}
